#include<opencv2/core/core.hpp>
#include<opencv2/opencv.hpp>
#include<ros/ros.h>
#include <image_transport/image_transport.h>


int main(int argc, char **argv){
	int camera_index = 1;

	 ros::init(argc, argv, "send_image");
	 ros::NodeHandle nh;

	 image_transport::ImageTransport it(nh);
  	 image_transport::Publisher pub = it.advertise("camera/image", 1);
  	 cv::Mat image = cv::imread(argv[1], CV_LOAD_IMAGE_COLOR);
  	 cv::waitKey(30);
  	 sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", image).toImageMsg();	



int main(int argc, char** argv)
{
  ros::init(argc, argv, "image_publisher");
  ros::NodeHandle nh;
  image_transport::ImageTransport it(nh);
  image_transport::Publisher pub = it.advertise("camera/image", 1);
  cv::Mat image = cv::imread(argv[1], CV_LOAD_IMAGE_COLOR);
  cv::waitKey(30);
  sensor_msgs::ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", image).toImageMsg();

  ros::Rate loop_rate(5);
  while (nh.ok()) {
    pub.publish(msg);
    ros::spinOnce();
    loop_rate.sleep();
  }
}
	 cv:: VideoCapture cap(camera_index);
	 if (!cap.isOpened()) {
		cerr << "Error opening camera" << endl;
	        return -1;
    	 }
	 while(1){
	 cv::Mat img;
	 cap>>img;
	
	 }
	return  0;
}
